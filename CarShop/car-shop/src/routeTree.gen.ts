/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BasicImport } from './routes/basic'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as BasicIndexImport } from './routes/basic.index'
import { Route as BasicPickupImport } from './routes/basic.pickup'
import { Route as BasicHatchbackImport } from './routes/basic.hatchback'
import { Route as BasicCoupeImport } from './routes/basic.coupe'

// Create/Update Routes

const BasicRoute = BasicImport.update({
  id: '/basic',
  path: '/basic',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BasicIndexRoute = BasicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BasicRoute,
} as any)

const BasicPickupRoute = BasicPickupImport.update({
  id: '/pickup',
  path: '/pickup',
  getParentRoute: () => BasicRoute,
} as any)

const BasicHatchbackRoute = BasicHatchbackImport.update({
  id: '/hatchback',
  path: '/hatchback',
  getParentRoute: () => BasicRoute,
} as any)

const BasicCoupeRoute = BasicCoupeImport.update({
  id: '/coupe',
  path: '/coupe',
  getParentRoute: () => BasicRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/basic': {
      id: '/basic'
      path: '/basic'
      fullPath: '/basic'
      preLoaderRoute: typeof BasicImport
      parentRoute: typeof rootRoute
    }
    '/basic/coupe': {
      id: '/basic/coupe'
      path: '/coupe'
      fullPath: '/basic/coupe'
      preLoaderRoute: typeof BasicCoupeImport
      parentRoute: typeof BasicImport
    }
    '/basic/hatchback': {
      id: '/basic/hatchback'
      path: '/hatchback'
      fullPath: '/basic/hatchback'
      preLoaderRoute: typeof BasicHatchbackImport
      parentRoute: typeof BasicImport
    }
    '/basic/pickup': {
      id: '/basic/pickup'
      path: '/pickup'
      fullPath: '/basic/pickup'
      preLoaderRoute: typeof BasicPickupImport
      parentRoute: typeof BasicImport
    }
    '/basic/': {
      id: '/basic/'
      path: '/'
      fullPath: '/basic/'
      preLoaderRoute: typeof BasicIndexImport
      parentRoute: typeof BasicImport
    }
  }
}

// Create and export the route tree

interface BasicRouteChildren {
  BasicCoupeRoute: typeof BasicCoupeRoute
  BasicHatchbackRoute: typeof BasicHatchbackRoute
  BasicPickupRoute: typeof BasicPickupRoute
  BasicIndexRoute: typeof BasicIndexRoute
}

const BasicRouteChildren: BasicRouteChildren = {
  BasicCoupeRoute: BasicCoupeRoute,
  BasicHatchbackRoute: BasicHatchbackRoute,
  BasicPickupRoute: BasicPickupRoute,
  BasicIndexRoute: BasicIndexRoute,
}

const BasicRouteWithChildren = BasicRoute._addFileChildren(BasicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/basic': typeof BasicRouteWithChildren
  '/basic/coupe': typeof BasicCoupeRoute
  '/basic/hatchback': typeof BasicHatchbackRoute
  '/basic/pickup': typeof BasicPickupRoute
  '/basic/': typeof BasicIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/basic/coupe': typeof BasicCoupeRoute
  '/basic/hatchback': typeof BasicHatchbackRoute
  '/basic/pickup': typeof BasicPickupRoute
  '/basic': typeof BasicIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/basic': typeof BasicRouteWithChildren
  '/basic/coupe': typeof BasicCoupeRoute
  '/basic/hatchback': typeof BasicHatchbackRoute
  '/basic/pickup': typeof BasicPickupRoute
  '/basic/': typeof BasicIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/basic'
    | '/basic/coupe'
    | '/basic/hatchback'
    | '/basic/pickup'
    | '/basic/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/basic/coupe'
    | '/basic/hatchback'
    | '/basic/pickup'
    | '/basic'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/basic'
    | '/basic/coupe'
    | '/basic/hatchback'
    | '/basic/pickup'
    | '/basic/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  BasicRoute: typeof BasicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  BasicRoute: BasicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/basic"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/basic": {
      "filePath": "basic.tsx",
      "children": [
        "/basic/coupe",
        "/basic/hatchback",
        "/basic/pickup",
        "/basic/"
      ]
    },
    "/basic/coupe": {
      "filePath": "basic.coupe.tsx",
      "parent": "/basic"
    },
    "/basic/hatchback": {
      "filePath": "basic.hatchback.tsx",
      "parent": "/basic"
    },
    "/basic/pickup": {
      "filePath": "basic.pickup.tsx",
      "parent": "/basic"
    },
    "/basic/": {
      "filePath": "basic.index.tsx",
      "parent": "/basic"
    }
  }
}
ROUTE_MANIFEST_END */
